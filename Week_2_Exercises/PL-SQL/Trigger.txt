CREATE OR REPLACE TRIGGER UpdateCustomerLastModified
AFTER UPDATE ON Customers
FOR EACH ROW
BEGIN
    :NEW.LastModified := SYSDATE;
END;
/

CREATE TABLE AuditLog (
    AuditID NUMBER PRIMARY KEY,
    TransactionID NUMBER,
    AuditDate DATE,
    AuditMessage VARCHAR2(200)
);

CREATE OR REPLACE TRIGGER LogTransaction
AFTER INSERT ON Transactions
FOR EACH ROW
DECLARE
    v_auditID NUMBER;
BEGIN
    -- Get the next AuditID (assuming a sequence called AuditSeq exists)
    SELECT AuditSeq.NEXTVAL INTO v_auditID FROM dual;

    INSERT INTO AuditLog (AuditID, TransactionID, AuditDate, AuditMessage)
    VALUES (v_auditID, :NEW.TransactionID, SYSDATE, 'Transaction recorded.');

    COMMIT;  -- Commit the insert into the AuditLog
END;
/

CREATE OR REPLACE TRIGGER CheckTransactionRules
BEFORE INSERT ON Transactions
FOR EACH ROW
DECLARE
    v_balance NUMBER;
BEGIN
    -- Check the balance of the account
    SELECT Balance INTO v_balance FROM Accounts WHERE AccountID = :NEW.AccountID;

    IF :NEW.TransactionType = 'Withdrawal' AND v_balance < :NEW.Amount THEN
        RAISE_APPLICATION_ERROR(-20002, 'Insufficient funds for withdrawal.');
    ELSIF :NEW.TransactionType = 'Deposit' AND :NEW.Amount <= 0 THEN
        RAISE_APPLICATION_ERROR(-20003, 'Deposit amount must be positive.');
    END IF;
END;
/
